<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />

<script type="text/javascript" src="http://cdn.robotwebtools.org/EventEmitter2/current/eventemitter2.min.js"></script>
<script type="text/javascript" src="http://cdn.robotwebtools.org/roslibjs/current/roslib.min.js"></script>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

<script type="text/javascript" type="text/javascript">
  // Connecting to ROS
  // -----------------

  var ros = new ROSLIB.Ros({
    url : 'ws://localhost:9090'
  });



  // Getting and setting a param value
  // ---------------------------------


  var IpList = new ROSLIB.Param({
    ros : ros,
    name : '/IP'
  });

  
  	IpList.get(function(value) {
  		var select = document.getElementById("deviceList");
  		$.each( value, function( key, value ) {
  		   select.options[select.options.length] = new Option(key, value);
		});
  });
  
  
  
  function selectEvent(select){
    if(select.selectedIndex == 0){
      document.getElementById("dd_Device").textContent = '';
      document.getElementById("dd_IP").textContent = '';
      document.getElementById("dd_Camera").textContent = '';
    }
    else{
      var device = select.options[select.selectedIndex].text;
      var deviceParam =  new ROSLIB.Param({
        ros : ros,
        name : '/'+device
      }); 
    
    
      document.getElementById("dd_Device").textContent = device
      document.getElementById("dd_IP").textContent = select.value
      deviceParam.get(function(value){
        var output = 'No Camera Connected';
        if(value != null && value["camera_model"] != null){
          output = value["camera_model"]
        }
        document.getElementById("dd_Camera").textContent = output;
      });
    }
  }
  
  
  function publishShot(){
    var cmdShot = new ROSLIB.Topic({
      ros : ros,
      name : '/network_capture_chatter',
      messageType : 'camera_network_msgs/Capture'
    });
    var capture = new ROSLIB.Message({
      isHdr : false
    });
    
    cmdShot.publish(capture);
  }
  
  
  var timelapsClient = new ROSLIB.ActionClient({
    ros : ros,
    serverName : 'pi0/timelaps',
    actionName : 'camera_network_msgs/CameraControlAction'  
  });
  
  function timelapsAction(form){
    var goal = new ROSLIB.Goal({
    actionClient : timelapsClient,
    goalMessage : {
      picture_qty : parseFloat(form.timelaps_qty.value),
      inter_picture_delay_s : parseFloat(form.timelaps_frequency.value)
    }
  });
    goal.on('feedback', function(feedback) {
      document.getElementById("dd_timelaps_feedback").textContent = feedback.picture_taken
    });
    goal.on('result', function(result) {
      document.getElementById("dd_timelaps_status").textContent = "Idle";
      document.getElementById("dd_timelaps_termination").textContent = "Total Pictures taken:" + result.total_picture;
    });
    goal.send();
    document.getElementById("dd_timelaps_status").textContent = "Taking " + form.timelaps_qty.value + " Pictures at a frequency of " + form.timelaps_frequency.value;
    document.getElementById("dd_timelaps_feedback").textContent = "Waiting for feedback"
  }  
  
  
  
  var downloadClient = new ROSLIB.ActionClient({
    ros : ros,
    serverName : 'master/sftp',
    actionName : 'camera_network_msgs/CameraDownloadAction'
  });  
  
  function downloadAction(form){
    var goal = new ROSLIB.Goal({
    actionClient : downloadClient,
    goalMessage : {
      dowload_frequency_s : parseFloat(form.frequency.value)
    }
  });
    goal.on('feedback', function(feedback) {
      document.getElementById("dd_download_feedback").textContent = feedback.picture_downloaded
    });
    goal.on('result', function(result) {
      document.getElementById("dd_download_status").textContent = "Idle";
      document.getElementById("dd_download_termination").textContent = result.total_downloaded;
    });
    goal.send();
    document.getElementById("dd_download_status").textContent = "Downloading every " + form.frequency.value + " s";
    document.getElementById("dd_download_feedback").textContent = "Waiting for feedback"
  }  

  
</script>
<link rel="stylesheet" href="style.css" type="text/css" media="screen, projection" />
</head>

<body>
  <header>
    <h1>Camera Network</h1>
    <select onchange="selectEvent(this);" id ="deviceList">
      <option value="index0">Online Devices</option>
    </select> 
  
  </header>
 <nav>
    <dl>
      <dt>Device:</dt>
        <dd id="dd_Device"></dd>
      <dt>IP:</dt>
        <dd id="dd_IP"></dd>
      <dt>Camera Type:</dt>
        <dd id="dd_Camera"></dd>
    </dl> 
  </nav> 
  
  
  <!-- Timelaps interface -->
  <div class="download">
    <form name="timelaps" action="javascript:void(0)" method="get">
        Frequency (s) : <input id="timelaps_frequency" type="number" value=0 name="timelaps_frequency" >
        Quantity (<0 = infinite) : <input id="timelaps_quantity" type="number" value=0 name="timelaps_qty" >
      <dl>
        <dt>Status:</dt>
          <dd id ="dd_timelaps_status">Idle</dd>
        <dt>Feedback:</dt>
          <dd id="dd_timelaps_feedback"></dd>
        <dt>Termination:</dt>
          <dd id="dd_timelaps_termination"></dd>
      </dl>
      <input type="submit" class="styleButton" onclick="timelapsAction(this.form)" value="Set">
    </form> 
  </div>  
  
  <!-- Network shot Button -->
  <button type="button" class="styleButton" onclick = "publishShot()">Network Shot!</button> 

  <!-- Download interface -->
  <div class="download">
    <form name="download" action="javascript:void(0)" method="get">
      Download frequency (s) (0 = one time) : <input id="input_frequency" type="number" value=0 name="frequency" >
      <dl>
        <dt>Status:</dt>
          <dd id ="dd_download_status">Idle</dd>
        <dt>Feedback:</dt>
          <dd id="dd_download_feedback"></dd>
        <dt>Termination:</dt>
          <dd id="dd_download_termination"></dd>
      </dl>
      <input type="submit" class="styleButton" onclick="downloadAction(this.form)" value="Download">
    </form> 
  </div>
  
</body>
</html>